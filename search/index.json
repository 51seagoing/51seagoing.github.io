[{"content":"【手残党必备】PrivadoVPN安装全攻略，告别隐私泄露！🔒✨ 亲爱的家人们，今天我要吹爆这个PrivadoVPN安装教程，简直是小白的救星！在这个信息爆炸的时代，保护个人隐私变得尤为重要。🛡️\n🚀【准备工作】 在开始之前，请确保你的设备已经连接到互联网，并且有足够的权限进行软件安装。\n🔧【详细安装步骤】\n访问官网：打开你的浏览器，输入PrivadoVPN的官方网站地址。 下载软件：在首页找到下载按钮，选择适合你设备系统的版本进行下载。 启动安装：下载完成后，双击安装文件，同意用户许可协议。 选择安装路径：建议选择默认路径，除非你的C盘空间不足。 自定义设置：在这一步，记得取消勾选任何不需要的附加软件。 完成安装：点击“完成”按钮，等待安装过程结束。 🔗【配置VPN】\n打开客户端：安装完成后，桌面上会出现PrivadoVPN的快捷方式，双击打开。 登录账号：输入你注册的PrivadoVPN账号和密码，点击登录。 选择服务器：根据你的需求，选择一个最佳的服务器位置。 连接VPN：点击“连接”按钮，等待几秒钟，直到显示“已连接”。 🛑【常见问题解答】\n连接失败：检查你的网络连接，或者尝试更换服务器。 速度慢：可能是服务器负载过高，尝试选择其他服务器。 忘记密码：可以通过注册邮箱重置密码。 📝【使用建议】\n定期更新VPN软件，以确保安全性。 不要在公共网络上进行敏感操作，如网上银行。 使用VPN时，遵守当地法律法规。 ","date":"2023-01-04T10:51:54+08:00","image":"https://picsum.photos/800/600.webp?random=d145ab65","permalink":"https://orange-blog.github.io/p/20230104/","title":"【手残党必备】PrivadoVPN安装全攻略，告别隐私泄露！🔒✨"},{"content":"ProtonVPN：无限流量的VPN ​\nprotonVPN 是一款由 Proton AG 开发的虚拟专用网络 (VPN) 软件。ProtonVPN 的设计初衷是为了保护用户的隐私和安全，同时保持互联网自由。 特色功能\n网络锁定（Kill Switch）：如果 VPN 连接中断，网络锁定功能会自动断开互联网连接，确保用户的数据不会泄露。 分流（Split Tunneling）：用户可以选择哪些应用程序通过 VPN 连接，哪些应用程序直接访问互联网。 安全核心（Secure Core）：将用户的流量通过多个安全服务器进行传输，增加额外的隐私保护层。 Tor over VPN：可以将用户的流量通过 Tor 网络传输，为用户提供额外的匿名性。 多平台支持：支持 Windows、macOS、Linux、iOS 和 Android 平台。 价格和订阅\n免费版本：提供有限的服务器选择和速度，但足够用于基本的隐私保护。\n付费版本：提供更多服务器选择、更高的速度、更强的隐私保护功能和其他高级功能。付费版本包括 Basic、Plus 和 Visionary 计划，价格和功能有所不同。\n其实，对于普通用户而言，免费版本的就已经足够了。下面，简单介绍一下ProtonVPN的安装，官方网址：https://protonvpn.com/\n第一步，创建免费的账户\n点击网页右上角的“创建账户”，\n在网页的中下位置，找到“get Proton Free”这个按键，点击进去。当然，你有钱的话也可以支持一下开发商，毕竟薅多了也会秃的！\n一路free下去，不要犹豫！\n然后，会弹出一个注册页面，按提示进行注册即可。输入你的邮箱（建议使用国外的邮箱）进行注册，点击开始使用。\n之后ProtonVPN会自动帮你创建账号及密码。你接下来要做的就是下载对应的客户端进行安装即可。安装好客户端之后，首次打开你会看到如下界面，然后输入之前邮箱和密码。\n登录进去之后，你就看到下面这个画面，提示“You are not protected!”。意思就是你没有连接VPN，那就点击下面的快速连接即可，剩下的就是等待软件自动连接到服务器，连接上去就会变成CONNECTED。\n唯一的缺点就是第一次连接需要外网环境，而且连接比较慢（需要5分钟左右)、第一次连接成功之后，以后就没有这个限制了。我试用了几个月，速度还行，最关键的是免费流量！爱学习的童靴不能错过！\n","date":"2023-01-03T10:39:30+08:00","image":"https://picsum.photos/800/600.webp?random=6edb0e15","permalink":"https://orange-blog.github.io/p/20230103/","title":"无限流量的VPN"},{"content":"hugo +githubpages 绑定域名 ​\n​\t要在使用 Hugo 和 GitHub Pages 构建的个人博客上绑定自定义域名，可以按照以下步骤进行操作：\n注册域名：首先，你需要在域名注册商（如 Namecheap 或 GoDaddy）上注册一个域名。例如，如果你选择的是 Namecheap，可以在其网站上完成域名的购买。 配置 DNS 解析：在域名注册商的管理面板中，配置 DNS 解析，将域名指向你的 GitHub Pages 地址。通常，你需要添加一条 CNAME 记录，主机记录的值为你的域名，记录值为你的 GitHub Pages 地址（如 yourusername.github.io ）。 在 GitHub 上设置自定义域名：进入你的 GitHub 仓库设置页面（[https://github.com/yourusername/your-repo/settings/pages](https://github.com/yourusername/your-repo/settings/pages) ），在“Custom domain”字段中输入你想要绑定的域名。GitHub 会自动为你创建一个 CNAME 文件，并将其内容添加到你的仓库中。 创建 CNAME 文件：在 Hugo 博客的根目录下的 static 文件夹中创建一个名为 CNAME 的文件，无后缀。文件内容写上你的自定义域名。这样可以确保每次自动化部署时不会丢失自定义域名的配置。 验证域名绑定：完成上述步骤后，等待 DNS 解析生效（通常需要几分钟到几小时）。然后，你可以通过访问你的自定义域名来验证是否成功绑定。如果一切正常，你应该能够看到你的 Hugo 博客内容。 通过以上步骤，你就可以成功地将自定义域名绑定到使用 Hugo 和 GitHub Pages 构建的个人博客上。\n如何在不同域名注册商（如 Namecheap、GoDaddy）上配置 DNS 解析以指向 GitHub Pages？ 要在不同域名注册商（如 Namecheap、GoDaddy）上配置 DNS 解析以指向 GitHub Pages，可以按照以下步骤进行：\n在 Namecheap 上配置 DNS 解析 登录 Namecheap 账户： 登录到你的 Namecheap 账户。 管理域名： 在左侧边栏中选择 \u0026ldquo;Domain List\u0026rdquo;，然后点击你域名旁的 \u0026ldquo;Manage\u0026rdquo; 按钮。 进入高级 DNS 设置： 点击 \u0026ldquo;Advanced DNS\u0026rdquo; 选项卡，找到 \u0026ldquo;Host records\u0026rdquo; 部分。 添加新的记录： 点击 \u0026ldquo;Add New Record\u0026rdquo; 按钮，然后添加以下记录： A record for @：指向 185.199.108.153。 CNAME record for www：输入你的 gh-pages 网站（例如 username.github.io ）。 其他 A record：添加三个额外的 A record，每个记录的 IP 地址为 185.199.108.153。 在 GoDaddy 上配置 DNS 解析 登录 GoDaddy 账户： 登录到你的 GoDaddy 账户。 管理域名： 在 DNS 管理页面中，找到你的域名并点击管理。 更新 DNS 记录： 更新以下记录： A record：类型为 \u0026ldquo;A\u0026rdquo;，IP 地址更新为 185.199.108.153。 CNAME record：类型为 \u0026ldquo;CNAME\u0026rdquo;，名称为 \u0026ldquo;www\u0026rdquo;，输入你的 gh-pages 网站（例如 username.github.io ）。 其他 A record：添加三个额外的 A record，每个记录的 IP 地址为 185.199.108.153。 在 GitHub 上配置自定义域名 进入 GitHub 仓库设置： 在你的 GitHub 仓库中，点击 \u0026ldquo;Settings\u0026rdquo;，然后滚动到页面底部，找到 \u0026ldquo;GitHub Pages\u0026rdquo; 设置栏。 配置自定义域名： 在 \u0026ldquo;Custom domain\u0026rdquo; 输入框中，输入你注册的域名（例如 example.com ），然后点击 \u0026ldquo;Save\u0026rdquo;。 验证域名： GitHub 会自动检测并验证你的域名配置。 GitHub Pages 自定义域名设置的详细步骤是什么？ GitHub Pages 自定义域名的设置步骤如下：\n准备CNAME文件：首先，你需要在你的项目根目录下创建一个名为 CNAME 的文件，并将你的自定义域名写入该文件中。例如，如果你的自定义域名是 example.com ，则 CNAME 文件的内容应为 example.com 。 提交CNAME文件到GitHub：将包含自定义域名的 CNAME 文件提交到你的GitHub仓库中。如果你使用的是默认的 gh-pages 分支来发布页面，GitHub会自动将 CNAME 文件添加到该分支的根目录下 。 配置DNS记录：在你的域名提供商处，为你的自定义域名添加两条A记录，分别指向 GitHub Pages 提供的IP地址：192.30.252.153 和 192.30.252.154 。 设置自定义域名： 登录到你的GitHub仓库。 导航至仓库的设置页面（Settings）。 在左侧菜单中选择“Pages”选项。 在“Custom domain”部分，输入你已经配置好的自定义域名，并点击“Save”保存设置。GitHub会自动进行DNS校验，这个过程可能需要一些时间 。 开启HTTPS：如果需要，可以在保存自定义域名后勾选“Enforce HTTPS”选项，以强制使用HTTPS协议。GitHub会自动为你申请SSL证书，无需手动申请 。 验证和测试：完成以上步骤后，你可以通过输入你的自定义域名来访问你的GitHub Pages站点，确保一切正常运行 。 在 Hugo 博客项目中创建和管理 CNAME 文件的最佳实践是什么？ 在Hugo博客项目中创建和管理CNAME文件的最佳实践如下：\n创建CNAME文件： 在GitHub仓库的根目录下创建一个名为CNAME的文件。 打开并编辑该文件，在第一行写入你的域名（不包含http头）。 配置DNS记录： 如果使用子域名（如[[www.example.com](https://www.example.com)](https://www.example.com) ），只需在DNS中添加一个CNAME记录，指向username.github.io 。 如果使用顶级域名（如example.com ），则需要创建DNS A记录，指向GitHub的IP地址（例如：192.30.252.153 和 192.30.252.154）。不过，这种方式较为复杂且存在风险，因为GitHub可能会更改其IP地址。 同步和提交更改： 将CNAME文件添加到Git仓库：git add CNAME。 提交更改：git commit -m \u0026quot;Added CNAME\u0026quot;。 推送更改到远程仓库：git push。 如何验证自定义域名与 GitHub Pages 的绑定是否成功？ 要验证自定义域名与 GitHub Pages 的绑定是否成功，可以按照以下步骤进行：\n进入设置页面：在 GitHub 的任何页面的右上角，点击你的头像，然后选择“Settings”。 找到 Pages 设置：在侧边栏的“Code, planning, and automation”部分，点击“Pages”。 添加域名：在右侧，点击“Add a domain”。在“添加域名”字段中输入你希望验证的域名，并选择“Add domain”。 保存设置：填写完域名后，点击“Save”。GitHub 会自动进行 DNS 检查，如果检查通过，你会看到成功的提示。 验证域名所有权：GitHub 会自动验证域名的所有权。你可以通过添加一个名为“TXT”的记录来手动验证域名的所有权。GitHub 提供了一个二级域名和一串字符串，你需要在 DNS 解析中添加这些信息。 检查设置变化：进入自己的 GitHub Pages 设置页面，如果以下内容发生变化，就代表绑定成功了。 如果遇到 DNS 解析延迟或绑定失败，应如何诊断和解决？ 遇到DNS解析延迟或绑定失败时，可以采取以下步骤进行诊断和解决：\n使用nslookup命令进行诊断：首先，可以通过命令行工具如nslookup来判断DNS解析是否出现故障。在终端中输入nslookup命令并指定域名，观察返回结果中的\u0026quot;Query time\u0026quot;项，以测量DNS解析的延迟。 检查DNS服务器配置：确保配置的DNS服务器是合理的，并且网络连接正常。如果DNS解析器处于活动状态但无法解析主机名，可能是由于缺乏有效的WAN连接或网络设备不支持DNSSEC协议。此外，还需要检查防火墙是否定义了DNS服务器并能够访问它们。 清除本地DNS缓存：有时，本地DNS缓存可能会导致解析问题。可以尝试清除本地DNS缓存，然后重新进行DNS查询。 检查HOSTS文件：在本地计算机中，访问某域名时会首先查看本地系统中的HOSTS文件。如果HOSTS文件中存在错误的解析条目，可能会导致DNS解析失败。因此，需要检查并修正HOSTS文件中的条目。 更换本地DNS服务器：如果怀疑是由于DNS劫持或其他运营商问题导致的解析故障，可以尝试更换本地DNS服务器。选择一个可靠的公共DNS服务器（如Google DNS或Cloudflare DNS）可能有助于解决此类问题。 等待DNS更新生效：如果最近修改了DNS设置，可能需要等待一段时间（通常为0至72小时）以确保全球范围内的DNS记录更新生效。 ","date":"2023-01-01T10:46:11+08:00","image":"https://picsum.photos/800/600.webp?random=6b63f77d","permalink":"https://orange-blog.github.io/p/20230101/","title":"hugo +githubpages 绑定域名"}]